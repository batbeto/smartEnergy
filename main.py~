import db
import calendar
import code
import re
import sys

USAGE = """\
USAGE: code.py <filter> <field> <database-file>

  <filter>  date based filter
  <field>   time, FPA, FPB, FPC, P1, P2, P3, Q1, Q2, Q3

  Ex: 2018-05-12T15:35:00 2019-02-05T02:45:00 0,3-4 P1 <database-file>
  weekdays= 0-monday, etc.
"""

if __name__ == "__main__":

    try:
        expr = ' '.join(sys.argv[1:-2])
        s_date = sys.argv[1]
        e_date = sys.argv[2]
        week_expr = "[" + sys.argv[3] + "]"
        week_pattern = re.compile(week_expr)
        field = sys.argv[-2]
        dbpath = sys.argv[-1]

        table, content = code.read_data(dbpath)
    except:
        print(USAGE)
        sys.exit(0)

    """
    compare the table read from file to the table read from database (OK!)
    """
    #table_query = db.DBClient().get_table("Data_SensorsV2")
    #print(table == table_query)

    """
    iterate over the database and filter by datetime interval, later filter by
    weekday
    """
    s = code.timestamp_from_datetime(s_date)
    e = code.timestamp_from_datetime(e_date)
    intervaldb = code.find_between_timestamps(table, s, e)
    # filter by weekday
    ans = []
    for entry in intervaldb:
        if week_expr != None:
            if week_pattern.match(str(code.weekday_from_timestamp(entry[0]))):
                ans.append(entry)
    # TODO filter by hour-minute-second interval
    for entry in ans:
        print(entry[0], datetime_from_timestamp(entry[0]))
    # group data by day
    """
    ans = code.group_entries_by_day(ans)
    for group in ans:
        s = 0.0
        for entry in ans[group]:
            s = s + entry[code.FIELD[field]]
        print(group, s / len(ans[group]), len(ans[group]), len(ans[group]) / 1439.0)
    """
